on: [push]

env:
  ProjectName: EmergeNS
  PackagesVersion: 1.2.10

jobs:
  windows:
    name: Windows
    # if: false # always skip job
    runs-on: windows-2022
    strategy:
      matrix:
        include:
        - arch: win-x64
          buildFolder: "VisualStudio2022_CI"
          installerName: install


      fail-fast: false

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Checkout JUCE
        uses: actions/checkout@v2
        with:
          repository: benkuper/JUCE
          ref: develop-local
          path: JUCE

      - name: Set Variables
        id: set_variables
        uses: ./.github/actions/set-suffix
        with:
          os: ${{ matrix.arch }}

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Force 64-bit Linker
        shell: powershell
        run: |
          cmd.exe /c "call `"C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat`" && set > %temp%\vcvars.txt"
          Get-Content "$env:temp\vcvars.txt" | Foreach-Object { if ($_ -match "^(.*?)=(.*)$") { Set-Content "env:\$($matches[1])" $matches[2] }}
     
      - name: Build
        run:  msbuild "Builds/${{ matrix.buildFolder }}/${{ env.ProjectName }}.sln" /p:PreferredToolArchitecture=x64 /m /verbosity:normal /p:Configuration=${{ steps.set_variables.outputs.config }}

      - name: Create Package
        id: create_package
        shell: powershell
        run: |
          Set-Variable -Name "PKGNAME" -Value "${{ env.ProjectName }}-${{ steps.set_variables.outputs.suffix }}"
          Invoke-WebRequest "${{ secrets.DEPDIRURL }}${{ env.ProjectName }}-win-x64-${{ steps.set_variables.outputs.dep }}-dependencies.zip" -OutFile ./deps.zip
          7z e deps.zip -aoa
          &"C:/Program Files (x86)/Inno Setup 6/ISCC.exe" "${{ github.workspace }}/${{ matrix.installerName }}.iss" /O. /F$PKGNAME
          echo "pkg-name=$PKGNAME.exe" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "pdb-name=$PKGNAME.pdb" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
        working-directory: ./Binaries/CI/App

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: EmergeNS_Mac
          path: ./Binaries/CI/App/${{ steps.create_package.outputs.pkg-name }}

  osx:
    # if: false # tmp disable
    name: OSX
    runs-on: macos-latest
    
    strategy:
      matrix:
        include:
        - arch: x86_64
          suffix: intel
          config: Release

        - arch: arm64
          suffix: silicon
          config: ReleaseSilicon
        
      fail-fast: false

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Checkout JUCE
        uses: actions/checkout@v2
        with:
          repository: benkuper/JUCE
          ref: develop-local
          path: JUCE

      - name: Set Suffix
        id: set_variables
        uses: ./.github/actions/set-suffix
        with:
          os: 'osx-${{ matrix.suffix }}'

      - name: Download Packages 
        run: |
          curl -L -o Packages.dmg 'http://s.sudre.free.fr/Software/files/Packages.dmg'
          hdiutil mount Packages.dmg
          sudo installer -pkg "/Volumes/Packages ${{ env.PackagesVersion }}/Install Packages.pkg" -target /
          hdiutil detach "/Volumes/Packages ${{ env.PackagesVersion }}/"
          
      - name: Setup XCode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.3'

      - name: Build
        uses: sersoft-gmbh/xcodebuild-action@v2.0.1
        with:
          project: Builds/MacOSX_CI/${{ env.ProjectName }}.xcodeproj
          destination: platform=macOS
          jobs: 2
          action: build
          arch: ${{ matrix.arch }}
          configuration: ${{ matrix.config }}
          use-xcpretty: true

      - name: Create Package
        id: create_package
        run:  |
          packagesbuild ${{ env.ProjectName }}.pkgproj
          PKGNAME=${{ env.ProjectName }}-${{ steps.set_variables.outputs.suffix }}.pkg
          mv ${{ env.ProjectName }}.pkg $PKGNAME
          echo "pkg-name=$PKGNAME" >> $GITHUB_OUTPUT
        working-directory: ./Package

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: EmergeNS_Mac
          path: ./Package/${{ steps.create_package.outputs.pkg-name }}

  linux:
    # if: false # tmp disable

    name: Linux
    runs-on: ubuntu-22.04
    container: tommagnier/chataigne-linux-x64-build:debian9

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Checkout JUCE
        uses: actions/checkout@v2
        with:
          repository: benkuper/JUCE
          ref: develop-local
          path: JUCE

      - name: Set Suffix
        id: set_variables
        uses: ./.github/actions/set-suffix
        with:
          os: 'x64'

      - name: Installing dependencies
        id: install_deps
        #shell: bash {0} # Opt out of fail-fast behavior (necessary to ignore fetch errors)
        run: |
          # Most dependencies are already installed in the Docker image. Uncomment the following lines if you need more
          # apt-get update && apt-get install ...

          cd $GITHUB_WORKSPACE
          wget "https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage"
          chmod a+x appimagetool-x86_64.AppImage

      # - name: Start SSH via ngrok
      #   uses: P3TERX/ssh2actions@main
      #   with:
      #     mode: ngrok
      #   env:
      #     # After sign up on the https://ngrok.com
      #     # You can find this token here: https://dashboard.ngrok.com/auth/your-authtoken
      #     NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}
          
      #     # ngrok server region [us, eu, au, ap, sa, jp, in] (optional, default: us)
      #     # You can find this server region here: https://ngrok.com/docs#global-locations
      #     NGROK_REGION: us

      #     # This password you will use when authorizing via SSH
      #     SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}

      - name: Build
        run: |
          cd $GITHUB_WORKSPACE/Builds/LinuxMakefile
          gcc --version
          make -j2 CONFIG=Release

      - name: Create AppImage
        id: create_package
        run: |
          mkdir -p ${{ env.ProjectName }}.AppDir/usr/bin/
          cp build/${{ env.ProjectName }} ${{ env.ProjectName }}.AppDir/usr/bin/

          PKGNAME=${{ env.ProjectName }}-linux-${{ steps.set_variables.outputs.suffix }}.AppImage
          echo "pkg-name=$PKGNAME" >> $GITHUB_OUTPUT
          $GITHUB_WORKSPACE/appimagetool-x86_64.AppImage --appimage-extract-and-run ${{ env.ProjectName }}.AppDir $PKGNAME
        working-directory: ./Builds/LinuxMakefile

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: EmergeNS_Mac
          path: ./Builds/LinuxMakefile/${{ steps.create_package.outputs.pkg-name }}